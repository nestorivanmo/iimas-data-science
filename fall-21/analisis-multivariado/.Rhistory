theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5,
position = position_dodge(0.8))) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
position = position_dodge(0.8)) +
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5, position), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5, position=position_dodge(0.8)), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.8)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.1)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.8)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
p <- ggplot(data=economics, aes(x=date, y=psavert)) +
geom_line(color='#00AFBB', size=1)
p
p + scale_x_date(limits=c(min,max))
p + scale_x_date(limits=c(min,max))
min <- as.Date("2002-1-1")
max <- NA
p + scale_x_date(limits=c(min,max))
p + scale_x_date(date_labels='%b/%Y')
p + stat_smooth(
color='#FC4E07', fill='#FC4E07', method='loess'
)
library('TTR')
library(TTR)
install.packages('TTR', dependencies=TRUE)
library
library(TTR)
p <- ggplot(data=economics, aes(x=date, y=psavert)) +
geom_line(color='#00AFBB', size=1)
mm <- SMA(economics$psavert, n=8)
p + geom_line(aes(x=date, y=mm))
demo()
require(fastR2);
install.packages(fastR2)
glimpse(irs)
source('~/Desktop/intro_r.R', echo=TRUE)
install.packages("fastR2")
glimpse(iris)
library(fastR2)
glimpse(iris)
head(iris, n=3)
tail(iris, n=3)
iris[50:51, 3:5]
iris[50:51, 3:4]
sample(iris, 6)
iris$Sepal.Length
snippet("data01")
gf_point(iris$Sepal.Length ~ iris$Sepal.Width, data = iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris)
gf_point(Sepal.Length ~ Sepal.Width | Species, data = iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris) %>%
gf_facet_wrap(~ Species)
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr", lib="~/R/library")
install.packages("tidyr", lib = "~/R/library")
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
library(fastR2)
glimpse(iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
tally(~ Species, data = iris)
tally(iris$Species)
tally(iris$Species)
tally(~ Species, data = iris)
table(iris$Species)
table(iris$Sepal.Length)
table(iris$Species)
table(iris$Species)
table(iris$Sepal.Length)
tally(iris$Sepal.Length > 6.0)
tally(cut(iris$Sepal.Length, breaks = 2:10))
gf_histogram(iris$Sepal.Length)
gf_histogram(~ Sepal.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris, binwidth = 0.5)
gf_histogram(~ Sepal.Length, data = iris, binwidth = 0.5, boundary = 8)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
iris$Sepal.Length
iris$Sepal.Length > 7.0
iris$Sepal.Length[iris$Sepal.Length > 7.0]
gf_dhistogram( ~ Sepal.Length, data = iris,
breaks = c(4, 5, 5.5, 6, 6.5, 7, 8, 10), color = "black",
fill = "skyblue")
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 4, format = "interval"))
gf_histogram(~ Species.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris, bins = 10)
gf_histogram(~ Sepal.Length, data = iris, bins = 2)
gf_histogram(~ Sepal.Length, data = iris, bins = 5)
gf_histogram(~ Sepal.Length, data = iris, bins = 10)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 2)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 0.5)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 4, format = "interval"))
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 2, format = "interval"))
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length | Species, bins = 15,
data = iris %>% filter(Species == "virginica"))
gf_freqpoly(~ Sepal.Length, color = ~ Species, data = iris,
binwidth = 9.5)
gf_freqpoly(~ Sepal.Length, color = ~ Species, data = iris,
binwidth = 0.5)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
gf_histogram( ~ duration, data = MASS::geyser, bins = 10)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
gf_histogram( ~ duration, data = MASS::geyser, bins = 10)
gf_histogram( ~ duration, data = MASS::geyser, bins = 1)
gf_histogram( ~ duration, data = MASS::geyser, bins = 100)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
# Measures of central tendency
mean(~ Sepal.Length, data = irs)
# Measures of central tendency
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Width, data = iris)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_histogram(~ Sepal.Width, data = iris, bins = 15)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_dhistogram(~ Sepal.Length, data = iris, bins = 15)
gf_dhistogram(~ Sepal.Width, data = iris, bins = 15)
mean(~ Sepal.Length ~ Species, data = iris)
mean(Sepal.Length ~ Species, data = iris)
mean(Sepal.Width ~ Species, data = iris)
median(Sepal.Length ~ Species, data = iris)
median(Sepal.Width ~ Species, data = iris)
df_stats(Sepal.Length ~ Species, data = iris, mean, median)
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15)
stem(MASS::geyser$duration)
stem(iris$Sepal.Length)
mean(~ Sepal.Length, data = iris, trim = 0.1)
)
mean(~ Sepal.Length, data = iris
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Length, data = iris, trim = 0.1)
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Length, data = iris, trim = 0.1)
mean(~ Sepal.Length | Species, data = iris)
mean(~ Sepal.Length | Species, data = iris, trim = 0.1)
# Measures of dispesion
quantile((1:10)^2)
gf_boxplot(Sepal.Length ~ Species, data = iris)
gf_boxplot(Sepal.Length ~ Species, data = iris) %>%
gf_refine(coord_flip())
gf_boxplot(duration ~ "", data = MASS::geyser) %>%
gf_refine(coord_flip())
var(Sepal.Length ~ Species, data = iris)
sd(Sepal.Length ~ Species, data = iris)
inspect(iris)
tally(death ~ victim, data = DeathPenalty)
tally(death ~ defendant | victim, data = DeathPenalty)
snippet("death-penalty03")
install.packages("vcd")
snippet("death-penalty03")
tally(death ~ defendant | victim, data = DeathPenalty)
tally(death ~ victim, data = DeathPenalty)
seq(0, 10, length.out = 500)
a <- 3
b <- 1
x <- seq(0, 10, length.out = 500)
y <- dgamma(x, a, b)
plot(x, w, type = "l", lwd = 2, col = "blue")
plot(x, y, type = "l", lwd = 2, col = "blue")
a <- 3
b <- 1
xx <- seq(0, 10, length.out = 500)
y <- dgamma(x, a, b)
plot(xx, y, type = "l", lwd = 2, col = "blue")
n <- 100
x <- rgamma(n)
x <- rgamma(n, a, b)
x
hist(x)
hist(x, breaks = "FD")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T)
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 2)
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 1)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
x_bar <- mean(x)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
s2 <- var(x)
s2 <- var(x)
((n-1)/n)*s2
x_bar <- mean(x)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
s2 <- var(x)
((n-1)/n)*s2
a_tilde <- (x_bar^2)/(sigma2_hat)
b_tilde <- x_bar / sigma2_hat
a
b
a_tilde <- (x_bar^2)/(sigma2_hat)
b_tilde <- x_bar / sigma2_hat
(a_tile, a)
c(a_tilde, a)
c(b_tilde, b)
a_tilde <- (x_bar^2)/(sigma2_hat^2)
b_tilde <- x_bar / sigma2_hat^2
c(a_tilde, a)
xx <- seq(0, 10, length.out = 500)
y <- dgamma(xx, a_tilde, b_tilde)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 1)
library(tidyverse)
library(ggplot2)
library(dplyr)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
# Estadistica t = (x_bar - 110) / (sigma/sqrt(n))
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
qnorm(0.95)
# p-value P[X_bar >= 113.5 | mu = 110] => P[Z >= t_x]
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
# b)
# √Årea de Rechazo
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
alpha <- 0.01
rech <- qnorm(1-alpha)
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.8)
qnorm(0.95)
qnorm(0.95)
qnorm(0.975)
qnorm(0.995)
pnorm(t_x)
t_x
n <- 1000
p0 <- 0.5
p <- 560/1000
alpha <- 0.05
Z <- (p - p0) / sqrt((0.5*(1-0.5))/1000)
abs(Z) > qnorm(1-alpha)
write(europe,file="europe.txt",ncol=1)
# ------------------------------------------------------------------------------
# Book:         MVA
# ------------------------------------------------------------------------------
# Quantlet:     MVAboxcar
# ------------------------------------------------------------------------------
# Description:  MVAboxcar computes Boxplots for the mileage (Variable 14)
#               of US, Japanese and European cars from carc.txt,
#               respectively.
# ------------------------------------------------------------------------------
# Usage:        -
# ------------------------------------------------------------------------------
# Keywords:     boxplot, quantile
# ------------------------------------------------------------------------------
# Inputs:       none
# ------------------------------------------------------------------------------
# Output:       Boxplots for the mileage (Variable 14) of US, Japanese
#               and European cars from carc.dat,respectively.
# ------------------------------------------------------------------------------
# Example:
# ------------------------------------------------------------------------------
# Author:       Wolfgang Haerdle, Jorge Patron, Vladimir Georgescu,
#               Song Song
# ------------------------------------------------------------------------------
# close windows, clear variables
rm(list = ls(all = TRUE))
graphics.off()
pdf("cars.pdf")
# Load data
# The data file should be located in the same folder as this Qlet
# Set the R working directory to this directory using setwd()
# setwd("C:/...")        # set working directory if windows
# setwd("/Users/...")    # set working directory if mac
x      = read.table("carc B.txt")
k      = 0
l      = 0
m      = 0
us     = NULL
japan  = NULL
europe = NULL
M      = x[, 2]
#C      = x[, 13]
C = x[,1]
for (i in 1:dim(x)[1]){
if (x[i, 1] == 1){
k     = k + 1
us[k] = x[i, 2]
} else if (x[i, 1] == 3){
l        = l + 1
japan[l] = x[i, 2]
} else if (x[i, 1] == 2){
m         = m + 1
europe[m] = x[i, 2]
}
}
#write(us,file="us.txt",ncol=1)
#write(japan,file="japan.txt",ncol=1)
#write(europe,file="europe.txt",ncol=1)
m1 = mean(us)
m2 = mean(japan)
m3 = mean(europe)
boxplot(us, japan, europe, axes = FALSE, frame = TRUE)
axis(side = 1, at = seq(1, 3), label = c("US", "JAPAN", "EU") )
axis(side = 2, at = seq(0, 50, 5), label = seq(0, 50, 5))
title('Car Data')
lines(c(0.6, 1.4), c(m1, m1), lty = "dotted", lwd = 1.2)
lines(c(1.6, 2.4), c(m2, m2), lty = "dotted", lwd = 1.2)
lines(c(2.6, 3.4), c(m3, m3), lty = "dotted", lwd = 1.2)
five = quantile(x[, 2], c(.025, .25, .50, .75, .975));
five
dev.off()
# ------------------------------------------------------------------------------
# Book:         MVA
# ------------------------------------------------------------------------------
# Quantlet:     MVAboxcar
# ------------------------------------------------------------------------------
# Description:  MVAboxcar computes Boxplots for the mileage (Variable 14)
#               of US, Japanese and European cars from carc.txt,
#               respectively.
# ------------------------------------------------------------------------------
# Usage:        -
# ------------------------------------------------------------------------------
# Keywords:     boxplot, quantile
# ------------------------------------------------------------------------------
# Inputs:       none
# ------------------------------------------------------------------------------
# Output:       Boxplots for the mileage (Variable 14) of US, Japanese
#               and European cars from carc.dat,respectively.
# ------------------------------------------------------------------------------
# Example:
# ------------------------------------------------------------------------------
# Author:       Wolfgang Haerdle, Jorge Patron, Vladimir Georgescu,
#               Song Song
# ------------------------------------------------------------------------------
# close windows, clear variables
rm(list = ls(all = TRUE))
graphics.off()
pdf("cars.pdf")
# Load data
# The data file should be located in the same folder as this Qlet
# Set the R working directory to this directory using setwd()
# setwd("C:/...")        # set working directory if windows
# setwd("/Users/...")    # set working directory if mac
x      = read.table("carc B.txt")
k      = 0
l      = 0
m      = 0
us     = NULL
japan  = NULL
europe = NULL
M      = x[, 2]
#C      = x[, 13]
C = x[,1]
for (i in 1:dim(x)[1]){
if (x[i, 1] == 1){
k     = k + 1
us[k] = x[i, 2]
} else if (x[i, 1] == 3){
l        = l + 1
japan[l] = x[i, 2]
} else if (x[i, 1] == 2){
m         = m + 1
europe[m] = x[i, 2]
}
}
#write(us,file="us.txt",ncol=1)
#write(japan,file="japan.txt",ncol=1)
#write(europe,file="europe.txt",ncol=1)
m1 = mean(us)
m2 = mean(japan)
m3 = mean(europe)
boxplot(us, japan, europe, axes = FALSE, frame = TRUE)
axis(side = 1, at = seq(1, 3), label = c("US", "JAPAN", "EU") )
axis(side = 2, at = seq(0, 50, 5), label = seq(0, 50, 5))
title('Car Data')
lines(c(0.6, 1.4), c(m1, m1), lty = "dotted", lwd = 1.2)
lines(c(1.6, 2.4), c(m2, m2), lty = "dotted", lwd = 1.2)
lines(c(2.6, 3.4), c(m3, m3), lty = "dotted", lwd = 1.2)
five = quantile(x[, 2], c(.025, .25, .50, .75, .975));
#five
dev.off()
# ------------------------------------------------------------------------------
# Book:         MVA
# ------------------------------------------------------------------------------
# Quantlet:     MVAboxcar
# ------------------------------------------------------------------------------
# Description:  MVAboxcar computes Boxplots for the mileage (Variable 14)
#               of US, Japanese and European cars from carc.txt,
#               respectively.
# ------------------------------------------------------------------------------
# Usage:        -
# ------------------------------------------------------------------------------
# Keywords:     boxplot, quantile
# ------------------------------------------------------------------------------
# Inputs:       none
# ------------------------------------------------------------------------------
# Output:       Boxplots for the mileage (Variable 14) of US, Japanese
#               and European cars from carc.dat,respectively.
# ------------------------------------------------------------------------------
# Example:
# ------------------------------------------------------------------------------
# Author:       Wolfgang Haerdle, Jorge Patron, Vladimir Georgescu,
#               Song Song
# ------------------------------------------------------------------------------
# close windows, clear variables
rm(list = ls(all = TRUE))
graphics.off()
pdf("cars.pdf")
# Load data
# The data file should be located in the same folder as this Qlet
# Set the R working directory to this directory using setwd()
# setwd("C:/...")        # set working directory if windows
# setwd("/Users/...")    # set working directory if mac
setwd("/Users/nestorivanmo/Desktop/iimas-data-science/fall-21/analisis-multivariado")
x      = read.table("carc B.txt")
k      = 0
l      = 0
m      = 0
us     = NULL
japan  = NULL
europe = NULL
M      = x[, 2]
#C      = x[, 13]
C = x[,1]
for (i in 1:dim(x)[1]){
if (x[i, 1] == 1){
k     = k + 1
us[k] = x[i, 2]
} else if (x[i, 1] == 3){
l        = l + 1
japan[l] = x[i, 2]
} else if (x[i, 1] == 2){
m         = m + 1
europe[m] = x[i, 2]
}
}
#write(us,file="us.txt",ncol=1)
#write(japan,file="japan.txt",ncol=1)
#write(europe,file="europe.txt",ncol=1)
m1 = mean(us)
m2 = mean(japan)
m3 = mean(europe)
boxplot(us, japan, europe, axes = FALSE, frame = TRUE)
axis(side = 1, at = seq(1, 3), label = c("US", "JAPAN", "EU") )
axis(side = 2, at = seq(0, 50, 5), label = seq(0, 50, 5))
title('Car Data')
lines(c(0.6, 1.4), c(m1, m1), lty = "dotted", lwd = 1.2)
lines(c(1.6, 2.4), c(m2, m2), lty = "dotted", lwd = 1.2)
lines(c(2.6, 3.4), c(m3, m3), lty = "dotted", lwd = 1.2)
five = quantile(x[, 2], c(.025, .25, .50, .75, .975));
#five
dev.off()
